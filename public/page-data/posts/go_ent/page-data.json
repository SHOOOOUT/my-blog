{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/go_ent","result":{"data":{"markdownRemark":{"id":"702f11c8-ddd0-5a53-9db3-147c92d01298","html":"<h2 id=\"はじめに\" style=\"position:relative;\"><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"はじめに permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>はじめに</h2>\n<p>Goには様々なORMがあります。メジャーなところでいうと<a href=\"https://github.com/go-gorm/gorm\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GORM</a>でしょうか。\n最近よく聞く「<a href=\"https://github.com/facebook/ent\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ent</a>」というFacebookが開発したORMを使って軽く遊んでみます。</p>\n<h2 id=\"ent\" style=\"position:relative;\"><a href=\"#ent\" aria-label=\"ent permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ent</h2>\n<p>entが開発された動機は以下の通りです。</p>\n<ul>\n<li>Goコードとしてのスキーマ</li>\n<li>型の安全性\nコードジェネレータもあり、これからどんどんリッチになるであろうライブラリです。</li>\n</ul>\n<h2 id=\"準備\" style=\"position:relative;\"><a href=\"#%E6%BA%96%E5%82%99\" aria-label=\"準備 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>準備</h2>\n<p>GoとMySQLの環境はローカルにあるものとします。\nentを使うためにはCLIをインストールする必要があります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>また、空のプロジェクトディレクトリを作成し、Go modulesで初期化します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>次にスキーマを作成します。今回はとりあえずユーザー情報（名前と年齢）を登録・取得するAPIを作成します。<code class=\"language-text\">User</code>を作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>すると以下のようにファイルが作成され、<code class=\"language-text\">ent/schema/user.go</code>にスキーマコードが生成されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<h2 id=\"フィールドの作成\" style=\"position:relative;\"><a href=\"#%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%81%AE%E4%BD%9C%E6%88%90\" aria-label=\"フィールドの作成 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>フィールドの作成</h2>\n<ul>\n<li><code class=\"language-text\">ent/schema/user.go</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>このままでは<code class=\"language-text\">User</code>フィールドは空のままなので、<code class=\"language-text\">name</code>と<code class=\"language-text\">age</code>のフィールドを作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>ここまでできたらモデルを生成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>すると以下のファイルが生成されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<h2 id=\"実装\" style=\"position:relative;\"><a href=\"#%E5%AE%9F%E8%A3%85\" aria-label=\"実装 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>実装</h2>\n<h3 id=\"マイグレーション\" style=\"position:relative;\"><a href=\"#%E3%83%9E%E3%82%A4%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\" aria-label=\"マイグレーション permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>マイグレーション</h3>\n<p>main.goを作成し、マイグレーション用のコードを書いていきます。このようにしておくことで、<code class=\"language-text\">ent/schema/user.go</code>を修正・追記してもテーブルをよしなにしてくれます。</p>\n<ul>\n<li>main.go</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>今回は、コードをGitHubなどで管理することも考慮して、MySQLの設定を.envファイルに記述して読み込むことにします。.envは.gitignoreに追記することを忘れないようにしましょう。</p>\n<ul>\n<li>.env 記述例</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<h4 id=\"マイグレーションの確認\" style=\"position:relative;\"><a href=\"#%E3%83%9E%E3%82%A4%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E7%A2%BA%E8%AA%8D\" aria-label=\"マイグレーションの確認 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>マイグレーションの確認</h4>\n<p>ここまですると、MySQLにカラムが作成されているはずです。\nMySQLに入り、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>↑を実行すると、カラムが作成されていることが確認できます。\n<img src=\"https://gyazo.com/388300134dbe60dcc24a7a5242fd230e/raw\" alt=\"https://gyazo.com/388300134dbe60dcc24a7a5242fd230e\"></p>\n<h3 id=\"ハンドラの実装\" style=\"position:relative;\"><a href=\"#%E3%83%8F%E3%83%B3%E3%83%89%E3%83%A9%E3%81%AE%E5%AE%9F%E8%A3%85\" aria-label=\"ハンドラの実装 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ハンドラの実装</h3>\n<p>ユーザー情報を全件取得するGET、id指定で取得するGET、ユーザー情報を登録するPOSTの３種類のハンドラを作成します。\nそれぞれのハンドラをmain.goのmainに追記していきます。\nウェブアプリケーションは今回はechoを使用します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<h4 id=\"各エンティティの操作\" style=\"position:relative;\"><a href=\"#%E5%90%84%E3%82%A8%E3%83%B3%E3%83%86%E3%82%A3%E3%83%86%E3%82%A3%E3%81%AE%E6%93%8D%E4%BD%9C\" aria-label=\"各エンティティの操作 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>各エンティティの操作</h4>\n<p>データの選択の場合は<code class=\"language-text\">Query()</code>を使用します。\nこれは条件の指定がないのでとてもシンプルですね。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>idを指定して1件のみ取得したい場合は、生のSQLと同じように<code class=\"language-text\">Where()</code>句を使うことで条件を指定できます。１件のみの取得の場合は<code class=\"language-text\">OnlyX()</code>を使用します。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<p>最後にデータの追加です。\n<code class=\"language-text\">Create()</code>を使い、登録したいNameとAgeを与えて上げれば登録できます。\nリクエストボディから値を受け取れるようにすればもっと良い感じになりそうです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n<h2 id=\"おわりに\" style=\"position:relative;\"><a href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\" aria-label=\"おわりに permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>おわりに</h2>\n<p>今回は簡単なGETリクエストとPOSTリクエストのみを実装しましたが、とてもわかりやすかったです。マイグレーション機能も他のORMより良さげな雰囲気を感じたので、今後採用される機会は増えていくのではないでしょうか。\n今回作成したリポジトリを置いておくので、ぜひ参考にしてください。\n間違い等ございましたら、twitterかgithubから教えて下さい！</p>\n<ul>\n<li><a href=\"https://github.com/SHOOOOUT/ent_api\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SHOOOOUT/ent_api</a></li>\n</ul>","fields":{"slug":"/posts/go_ent","tagSlugs":["/tag/go/"]},"frontmatter":{"date":"2020-11-02T12:14:45.505Z","description":"最近耳にするfacebook製のORMであるentを使用して簡単なAPIサーバーを構築してみた","tags":["Go"],"title":"GolangのORM「ent」使ってみた","socialImage":{"publicURL":"/static/6d93cbc4956a854d4c4369f0e281e7f3/42-line-bible.jpg"}}}},"pageContext":{"slug":"/posts/go_ent"}},"staticQueryHashes":["251939775","401334301","825871152"]}
{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/rest","result":{"data":{"markdownRemark":{"id":"4c81f961-6fa2-5c27-becb-3e58db16a084","html":"<h1 id=\"はじめに\" style=\"position:relative;\"><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-label=\"はじめに permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>はじめに</h1>\n<p>RESTって言葉は良く使うし、耳にするけど、正直イマイチ理解するに至ってなかったので自分が学んだことの整理がてらに記事を書いています。（間違いなどありましたらどんどんご指摘ください）</p>\n<h1 id=\"restとは\" style=\"position:relative;\"><a href=\"#rest%E3%81%A8%E3%81%AF\" aria-label=\"restとは permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTとは</h1>\n<p>Representational State Transferの略で、Webの設計思想(規約)のことです。URIにHTTPメソッドでアクセスすることによってデータの送受信を行います。\nそのRESTに従って設計されたシステムのことをRESTfulと呼びます。</p>\n<h1 id=\"設計の原則\" style=\"position:relative;\"><a href=\"#%E8%A8%AD%E8%A8%88%E3%81%AE%E5%8E%9F%E5%89%87\" aria-label=\"設計の原則 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>設計の原則</h1>\n<h2 id=\"ステートレスなクライアントサーバープロトコル\" style=\"position:relative;\"><a href=\"#%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%AC%E3%82%B9%E3%81%AA%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%83%97%E3%83%AD%E3%83%88%E3%82%B3%E3%83%AB\" aria-label=\"ステートレスなクライアントサーバープロトコル permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ステートレスなクライアント/サーバープロトコル</h2>\n<p>つまり、状態を保持しないようになっています。例えば、サーバーがクライアントサイドとのセッション情報を保持しないようにするなどです。\nステートレスにすることのメリットとしては、</p>\n<ul>\n<li>サーバー側の実装を簡略化できる。</li>\n<li>処理がシンプルになる</li>\n<li>（やや冗長にはなるが）ライアントのリクエストは状態に依存せず、常にリソースに対する操作に必要十分な情報となる</li>\n</ul>\n<p><a href=\"https://blog.sojiro.me/blog/2014/09/13/stateful-and-stateless/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">参考：ステートフル ステートレスとはどういうことか</a></p>\n<h2 id=\"同じurlからは同じ結果が得られる\" style=\"position:relative;\"><a href=\"#%E5%90%8C%E3%81%98url%E3%81%8B%E3%82%89%E3%81%AF%E5%90%8C%E3%81%98%E7%B5%90%E6%9E%9C%E3%81%8C%E5%BE%97%E3%82%89%E3%82%8C%E3%82%8B\" aria-label=\"同じurlからは同じ結果が得られる permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>同じURLからは同じ結果が得られる</h2>\n<p>URLによって一意的なアドレスになります。RESTにおいてはURLはあくまでなんのリソースかという情報のみを持つことになります。\n<code class=\"language-text\">https://www.hoge.com/users/fred</code>\nこのようにリソースの情報のみを入れるためgetやdeleteなどの動詞はURLに含めず、名詞で構成されることが多いです。</p>\n<h2 id=\"すべての情報に適用できるhttpメソッドのセット\" style=\"position:relative;\"><a href=\"#%E3%81%99%E3%81%B9%E3%81%A6%E3%81%AE%E6%83%85%E5%A0%B1%E3%81%AB%E9%81%A9%E7%94%A8%E3%81%A7%E3%81%8D%E3%82%8Bhttp%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88\" aria-label=\"すべての情報に適用できるhttpメソッドのセット permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>すべての情報に適用できるHTTPメソッドのセット</h2>\n<p>ですが、これでは取得するのか新規作成なのか削除なのかわかりません。\nここでhttpのリクエストメソッドを使います。代表的なリクエストメソッドは4つあります。</p>\n<table>\n<thead>\n<tr>\n<th>メソッド</th>\n<th>内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>GET</td>\n<td>取得</td>\n</tr>\n<tr>\n<td>POST</td>\n<td>追加</td>\n</tr>\n<tr>\n<td>PUT</td>\n<td>更新</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>削除</td>\n</tr>\n</tbody>\n</table>\n<p>一意に定められたアドレスに対してこれらのメソッドを用いて操作することで、一つのURLで済んでいます。</p>\n<h1 id=\"まとめ\" style=\"position:relative;\"><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\" aria-label=\"まとめ permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>まとめ</h1>\n<p>これら以外にもメリット・デメリットはありますが今回は代表的なものだけまとめてみました。\nざっくり言うとRESTはこんな感じの設計思想だってことですね。</p>","fields":{"slug":"/posts/rest","tagSlugs":["/tag/rest/"]},"frontmatter":{"date":"2020-02-14T12:22:04.517Z","description":"RESTってなんだろうという、自分の中での考えの整理も含めてまとめてみた。","tags":["REST"],"title":"RESTってなに？","socialImage":{"publicURL":"/static/eaa988471fd2b61a1d4d313d0d9a5d23/type-through-time.jpg"}}}},"pageContext":{"slug":"/posts/rest"}},"staticQueryHashes":["251939775","401334301","825871152"]}